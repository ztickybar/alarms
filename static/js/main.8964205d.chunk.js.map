{"version":3,"sources":["helpers/ImplicitMSALAuthenticationProvider.js","helpers/OfficeGraph.js","Alarms.js","serviceWorker.js","index.js"],"names":["inIframe","window","self","top","e","ImplicitMSALAuthenticationProvider","msalApplication","options","this","authenticationProviderOptions","that","Promise","resolve","reject","a","scopes","length","error","Error","name","message","handleRedirectCallback","response","getAccount","tokenRequest","acquireTokenSilent","authResponse","accessToken","InteractionRequiredAuthError","acquireTokenPopup","loginPopup","loginRedirect","graphScopes","require","msalConfig","auth","clientId","redirectUri","location","protocol","hostname","port","pathname","authority","storeAuthStateInCookie","Msal","authProvider","MSALAuthenticationProviderOptions","me","path","client","Client","initWithMiddleware","api","get","data","ZTICKYBAR","tools","setNotificationCount","tileId","count","parent","postMessage","action","key","_key","_targetOrigin","_openerHref","_tileId","init","Boolean","match","ReactDOM","render","useState","errors","setErrors","setMe","useEffect","OfficeGraph","then","m","catch","push","context","JSON","stringify","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8964205d.chunk.js","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * @module ImplicitMSALAuthenticationProvider\r\n */\r\nimport { InteractionRequiredAuthError,UserAgentApplication } from \"msal\";\r\n/**\r\n * @class\r\n * Class representing ImplicitMSALAuthenticationProvider\r\n * @extends AuthenticationProvider\r\n */\r\n\r\nfunction inIframe() {\r\n   \r\n  try {\r\n    return window.self !== window.top;\r\n  } catch (e) {\r\n    return true;\r\n  }\r\n}\r\nexport class ImplicitMSALAuthenticationProvider {\r\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Creates an instance of ImplicitMSALAuthenticationProvider\r\n   * @param {UserAgentApplication} msalApplication - An instance of MSAL UserAgentApplication\r\n   * @param {MSALAuthenticationProviderOptions} options - An instance of MSALAuthenticationProviderOptions\r\n   * @returns An instance of ImplicitMSALAuthenticationProvider\r\n   */\r\n  constructor(msalApplication, options) {\r\n    this.options = options;\r\n    this.msalApplication = msalApplication;\r\n  }\r\n  /**\r\n   * @public\r\n   * @async\r\n   * To get the access token\r\n   * @param {AuthenticationProviderOptions} authenticationProviderOptions - The authentication provider options object\r\n   * @returns The promise that resolves to an access token\r\n   */\r\n  getAccessToken(authenticationProviderOptions) {\r\n      var that = this\r\n    return new Promise(async (resolve, reject) => {\r\n      const options = authenticationProviderOptions;\r\n      let scopes;\r\n      if (typeof options !== \"undefined\") {\r\n        scopes = options.scopes;\r\n      }\r\n      if (typeof scopes === \"undefined\" || scopes.length === 0) {\r\n        scopes = this.options.scopes;\r\n      }\r\n      if (scopes.length === 0) {\r\n        const error = new Error();\r\n        error.name = \"EmptyScopes\";\r\n        error.message = \"Scopes cannot be empty, Please provide a scopes\";\r\n        throw error;\r\n      }\r\n\r\n      // var errorState = sessionStorage.getItem(\"msal.error\")\r\n      // if (errorState===\"invalid_state_error\"){\r\n        \r\n      \r\n      //   //sessionStorage.clear()\r\n      //   that.msalApplication.logout()\r\n      // }\r\n      that.msalApplication.handleRedirectCallback((error, response) => {\r\n        debugger;\r\n        if (error) {\r\n          return reject(error);\r\n        }\r\n      });\r\n\r\n\r\n\r\n\r\n      if (this.msalApplication.getAccount()) {\r\n        const tokenRequest = {\r\n          scopes\r\n        };\r\n        try {\r\n          const authResponse = await this.msalApplication.acquireTokenSilent(\r\n            tokenRequest\r\n          );\r\n          resolve(authResponse.accessToken);\r\n        } catch (error) {\r\n          if (error instanceof InteractionRequiredAuthError) {\r\n            try {\r\n              if (inIframe()) {\r\n                const authResponse = await this.msalApplication.acquireTokenPopup(\r\n                  tokenRequest\r\n                );\r\n                resolve(authResponse.accessToken);\r\n              } else {\r\n                  debugger\r\n              }\r\n            } catch (error) {\r\n                debugger\r\n              reject(error);\r\n            }\r\n          } else {\r\n            debugger\r\n            reject(error);\r\n          }\r\n        }\r\n      } else {\r\n        try {\r\n          const tokenRequest = {\r\n            scopes\r\n          };\r\n          if (inIframe()) {\r\n            await this.msalApplication.loginPopup(tokenRequest);\r\n            const authResponse = await this.msalApplication.acquireTokenSilent(\r\n              tokenRequest\r\n            );\r\n            resolve(authResponse.accessToken);\r\n          } else {\r\n            \r\n           that.msalApplication.loginRedirect(tokenRequest);\r\n            return; // should have been redirected now\r\n          }\r\n        } catch (error) {\r\n            \r\n          reject(error);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import * as Msal from \"msal\";\nimport { Client } from \"@microsoft/microsoft-graph-client\";\n\nimport { MSALAuthenticationProviderOptions } from \"@microsoft/microsoft-graph-client/lib/src/MSALAuthenticationProviderOptions\";\n\nimport { ImplicitMSALAuthenticationProvider } from \"./ImplicitMSALAuthenticationProvider\";\n//import { ImplicitMSALAuthenticationProvider } from \"@microsoft/microsoft-graph-client/lib/src/ImplicitMSALAuthenticationProvider\";\nimport axios from \"axios\";\n\n//import Excel from \"exceljs\"\nimport _ from \"lodash\";\nvar XLSX = require(\"xlsx\");\n// Configuration options for MSAL @see https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL.js-1.0.0-api-release#configuration-options\n// const msalConfig = {\n//     auth: {\n//         clientId: \"your_client_id\", // Client Id of the registered application\n//         redirectUri: \"your_redirect_uri\",\n//     },\n// };\nconst intoStream = require(\"into-stream\");\nconst graphScopes = [\n  \"User.Read.All\",\n  \"User.ReadWrite.All\"\n]; // An array of graph scopes\n\n// // Important Note: This library implements loginPopup and acquireTokenPopup flow, remember this while initializing the msal\n// // Initialize the MSAL @see https://github.com/AzureAD/microsoft-authentication-library-for-js#1-instantiate-the-useragentapplication\n\nvar replyUrl =\n  window.location.protocol +\n  \"//\" +\n  window.location.hostname +\n  (window.location.port !== 80 &&\n  window.location.port !== 443 &&\n  window.location.port !== \"\"\n    ? \":\" + window.location.port\n    : \"\") +\n  window.location.pathname;\nvar msalConfig = {\n  auth: {\n    clientId: \"443ae28d-8cf8-42fd-ba63-f403ac085ead\",\n    redirectUri: replyUrl,\n    authority: \"https://login.microsoftonline.com/common\",\n    storeAuthStateInCookie:true\n  }\n};\nvar requestObj = {\n  scopes: graphScopes\n};\nvar msalInstance = new Msal.UserAgentApplication(msalConfig);\nmsalInstance.handleRedirectCallback((error, response) => {\n  // handle redirect response or error\n});\n\nconst msalApplication = new Msal.UserAgentApplication(msalConfig);\nconst authOptions = new MSALAuthenticationProviderOptions(graphScopes);\nconst authProvider = new ImplicitMSALAuthenticationProvider(\n  msalApplication,\n  authOptions\n);\nconst options = {\n  authProvider // An instance created from previous step\n};\n\nfunction getClient() {\n  const MsClient = Client;\n  const client = MsClient.initWithMiddleware(options);\n  return client;\n}\n\nfunction get(path) {\n  return new Promise(async (resolve, reject) => {\n    const client = getClient();\n    try {\n      let data = await client.api(path).get();\n\n      return resolve(data);\n    } catch (error) {\n      return reject(error);\n    }\n  });\n}\nfunction me() {\n  return get(\"/me\");\n}\n\n\nexport default {\n  me\n  \n};\n\n// var PTO365 = {\n//   user: msalInstance.getAccount()\n// };\n// if (!PTO365.user) {\n//   msalInstance.loginRedirect(requestObj);\n// }\n// console.log(\"User account\", PTO365.user);\n","/* \nTool Catalogue\n\nCopyright (c) jumpto365, Inc\n\nAll rights reserved.\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"\"Software\"\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n * \n * Written by Niels Gregers Johansen <niels@jumpto365.com>, December 2019\n */\nimport React, { useState, useEffect } from \"react\";\nimport _ from \"lodash\";\nimport OfficeGraph from \"./helpers/OfficeGraph\";\n\nexport function getSearchParametersFromHRef(href) {\n  if (!href) return {};\n  var search = {};\n  var s1 = href.split(\"?\");\n  if (s1.length > 1) {\n    var s2 = s1[1].split(\"&\");\n    for (let index = 0; index < s2.length; index++) {\n      const s3 = s2[index].split(\"=\");\n      search[s3[0]] = decodeURIComponent(s3[1]);\n    }\n  }\n  return search;\n}\n\nexport function getSearchParametersFromHash(href) {\n  if (!href) return {};\n  var search = {};\n  var s1 = href.split(\"#\");\n  if (s1.length > 1) {\n    var s2 = s1[1].split(\"&\");\n    for (let index = 0; index < s2.length; index++) {\n      const s3 = s2[index].split(\"=\");\n      search[s3[0]] = decodeURIComponent(s3[1]);\n    }\n  }\n  return search;\n}\n\nclass ZTICKYBAR {\n  static init = () => {\n    return new ZTICKYBAR();\n  };\n  constructor() {\n    this._key = \"123\";\n    this._targetOrigin = \"*\";\n  }\n\n  /**\n   * Returns a promise of returning an array of tiles\n   */\n  tools = () => {\n    return new Promise((resolve, reject) => {\n      resolve([]);\n    });\n  };\n  /**\n   * setNotificationCount Update the visual notification counter on a given tile\n   * @param {*} tileId Number of the tile\n   * @param {*} count  Count to set, only whole numbers (integers) are accepted. Setting the value to 0 will hide the notification counter\n   */\n  setNotificationCount = (tileId, count) => {\n    if (window.parent) {\n      //  console.log(window.parent.location.href)\n      window.parent.postMessage(\n        {\n          action: \"setNotificationCount\",\n          count,\n          tileId,\n          key: this._key\n        },\n        this._targetOrigin\n      );\n    }\n  };\n  get openerHref() {\n    return this._openerHref;\n  }\n  get tileId() {\n    return this._tileId;\n  }\n}\n\nexport default function Alarms() {\n  const [isZoomed, setIsZoomed] = useState(false);\n  const [errors, setErrors] = useState([]);\n  const [me, setMe] = useState({});\n  useEffect(() => {\n    OfficeGraph.me()\n      .then(m => {\n        setMe(m);\ndebugger\n        var ztickyBar = ZTICKYBAR.init();\n        ztickyBar.setNotificationCount(3, 2);\n      })\n      .catch(error => {\n        errors.push({ context: \"OfficeGraph.me() \", error });\n        setErrors(errors);\n      });\n  }, []);\n\n  return (\n    <div>\n      Alarms\n      {JSON.stringify(me)}\n      ---\n      {JSON.stringify(errors)}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Alarms from './Alarms';\nimport * as serviceWorker from './serviceWorker';\n\nimport {login} from \"./authenticate\" // autonom library - will force signin\n//import \"./helpers/OfficeGraph\"\n//login()\nReactDOM.render(<Alarms />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}